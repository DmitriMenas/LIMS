'use strict';
const { Sample } = require('../models')
const bcrypt = require("bcryptjs");

// Include schema options for production
let options = {};
if (process.env.NODE_ENV === 'production') {
  options.schema = process.env.SCHEMA;
}


/** @type {import('sequelize-cli').Migration} */
module.exports = {
  async up (queryInterface, Sequelize) {
    const tableName = process.env.NODE_ENV === 'production' && process.env.SCHEMA
    ? `"${process.env.SCHEMA}"."Samples"`
    : "Samples"

    const sampleNames = [
      'Strawberry Cough', 'Do-Si-Dos', 'Durban Poison', 'Cherry Pie',
      'Mimosa', 'Trainwreck', 'Runtz', 'Zkittlez', 
      'Lemon Haze', 'Jack Herer', 'Bubba Kush', 'Purple Haze',
      'Wedding Cake', 'Gelato', 'Green Crack', 'AK-47',
      'Northern Lights', 'White Widow', 'Pineapple Express', 'Granddaddy Purple',
      'OG Kush', 'Sour Diesel', 'Girl Scout Cookies', 'Blue Dream'
    ]

    const [ existingSamples ] = await queryInterface.sequelize.query(
      `SELECT sample_name FROM ${tableName} WHERE sample_name in ('${sampleNames.join("','")}');`
    )

    const existingSampleNames = existingSamples.map(sample => sample.sample_name)

    const samplesToCreate = [
      {
        userId: 3,
        sample_name: 'Strawberry Cough',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'placed',
        result: null,
        orderId: 1,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Do-Si-Dos',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'placed',
        result: null,
        orderId: 1,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Durban Poison',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Cherry Pie',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Mimosa',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Trainwreck',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Runtz',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Zkittlez',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Lemon Haze',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Jack Herer',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Bubba Kush',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Purple Haze',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Wedding Cake',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Gelato',
        sample_type: 'Flower',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'in progress',
        result: null,
        orderId: 2,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Green Crack',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'AK-47',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Northern Lights',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'White Widow',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Pineapple Express',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Granddaddy Purple',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'OG Kush',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Sour Diesel',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Girl Scout Cookies',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
      {
        userId: 3,
        sample_name: 'Blue Dream',
        sample_type: 'Concentrate',
        test_type: "R&D",
        collection_date: new Date('2025-04-05'),
        received_date: new Date('2025-04-06'),
        status: 'completed',
        result: null,
        orderId: 3,
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ].filter(sample => !existingSampleNames.includes(sample.sample_name))

    if(samplesToCreate.length){
      return Sample.bulkCreate(samplesToCreate, {validate: true})
    } else {
      console.log("All samples already exist, skipping insertion")
    }
  },
    
  async down(queryInterface, Sequelize){
    options.tableName = "Samples"
    const Op = Sequelize.Op
    return queryInterface.bulkDelete(options, {
      sample_name: { [Op.in]: [
        'Strawberry Cough', 'Do-Si-Dos', 'Durban Poison', 'Cherry Pie',
        'Mimosa', 'Trainwreck', 'Runtz', 'Zkittlez', 
        'Lemon Haze', 'Jack Herer', 'Bubba Kush', 'Purple Haze',
        'Wedding Cake', 'Gelato', 'Green Crack', 'AK-47',
        'Northern Lights', 'White Widow', 'Pineapple Express', 'Granddaddy Purple',
        'OG Kush', 'Sour Diesel', 'Girl Scout Cookies', 'Blue Dream'
      ]}
    })
  }
};
